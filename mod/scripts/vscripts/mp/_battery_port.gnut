untyped
global function InitTurretBatteryPort
global function TryUseBatteryPort

global struct BatteryPortStruct
{
    entity batteryPort
    entity turret
    bool hasBattery
    float lastBatteryAppliedTime
}

struct
{
    array<BatteryPortStruct> allBatteryPorts
} file

void function InitTurretBatteryPort( entity batteryPort )
{
    batteryPort.s.hasBattery <- false               // bool
    batteryPort.s.batteryPack <- null               // entity
    batteryPort.s.beingUsed <- false                // bool

    /* // not used yet
    array<entity> allTurrets = GetNPCArrayByClass( "npc_turret_mega" )
    entity turret = GetClosest( allTurrets, batteryPort.GetOrigin(), 9999 ) // get nearest turret
    BatteryPortStruct initStruct
    initStruct.batteryPort = batteryPort
    initStruct.turret = turret
    initStruct.hasBattery = false
    initStruct.lastBatteryAppliedTime = -1.0 // not used yet
    */
}

void function TryUseBatteryPort( entity player, entity batteryPort )
{
    if( !PlayerHasBattery( player ) )
        return
    player.EndSignal( "OnDeath" )
    player.EndSignal( "OnDestroy" )
    player.EndSignal( "ScriptAnimStop" )
    AddButtonPressedPlayerInputCallback( player, IN_JUMP, ForceStopUseBatteryPort )

    OnThreadEnd(
        function():( player )
        {
            RemoveButtonPressedPlayerInputCallback( player, IN_JUMP, ForceStopUseBatteryPort )
        }
    )

    if( IsValid( batteryPort.s.batteryPack ) ) // already has a battery
        return
    if( batteryPort.s.beingUsed ) // already being using
        return
    waitthread PlayerApplesBatteryPackToPort( player, batteryPort )
}

void function ForceStopUseBatteryPort( entity player )
{
    player.Signal( "ScriptAnimStop" )
}

void function PlayerApplesBatteryPackToPort( entity player, entity batteryPort )
{
    table result = {}
    result.success <- false
    batteryPort.s.beingUsed = true

	entity battery = GetBatteryOnBack( player )
	battery.Hide() //Hide it because the animation has a battery model already
    Battery_StopFX( battery )

	entity tempBattery3p
	tempBattery3p = CreatePropDynamic( RODEO_BATTERY_MODEL_FOR_RODEO_ANIMS )
	tempBattery3p.SetParent( player, "R_HAND", false, 0.0 )
	tempBattery3p.RemoveFromSpatialPartition()

	entity tempBattery1p
	tempBattery1p = CreatePropDynamic( RODEO_BATTERY_MODEL_FOR_RODEO_ANIMS )
	tempBattery1p.SetParent( player.GetFirstPersonProxy(), "R_HAND", false, 0.0 )
	tempBattery1p.RemoveFromSpatialPartition()

	player.p.rodeoAnimTempProps.append( tempBattery3p )
	player.p.rodeoAnimTempProps.append( tempBattery1p )

    entity ref = CreateScriptMover() // use a ref to play animations
    ref.SetOrigin( batteryPort.GetOrigin() + < 40,0,-35 > ) // offset for animation
    //ref.SetAngles( < 0, player.EyeAngles().y, 0 > ) // sync player's eyeAngle

	OnThreadEnd(
	function() : ( battery, batteryPort, player, ref, result )
		{
			if ( IsValid( battery ) && !result.success ) // animation interrupted
            {
				battery.Show()
                Battery_StartFX( battery )
            }

            if ( IsValid( batteryPort ) )
                batteryPort.s.beingUsed = false

			if ( IsValid( player ) )
            {
                DeployAndEnableWeapons( player )
                ClearApplyBatteryAnimTempProps( player )
                thread DelayedClearSyncedEntityForBatteryApply( player, batteryPort )
                PutEntityInSafeSpot( player, player, null, player.GetOrigin() + <0, 0, 32>, player.GetOrigin() )

                StopSoundOnEntity( player, "rodeo_medium_battery_return_ext" )

                if( result.success ) // successfully applied battery
                {
                    ApplyBatteryToBatteryPort( player, batteryPort )
                }

                CleanUpBatterySequenceForPlayer( player )
            }

            // remove ref after cleaned sequence
            if ( IsValid( ref ) )
                ref.Destroy()
		}
	)

	FirstPersonSequenceStruct sequence
	sequence.attachment = "REF" // only ref the batteryPort has

    // these are baically atlas's battery animations
	sequence.thirdPersonAnim 		= "pt_rodeo_ride_r_return_battery"
	sequence.firstPersonAnim 		= "ptpov_rodeo_ride_r_return_battery"
    
	EmitSoundOnEntity( player, "rodeo_medium_battery_return_ext" ) // emit sound on player

	player.SetSyncedEntity( ref )
    HolsterAndDisableWeapons( player )

    float sequenceDuration = player.GetSequenceDuration( sequence.thirdPersonAnim )
    // thread so we can set things inside sequence
	thread FirstPersonSequence( sequence, player, ref )

    wait sequenceDuration - 1.1 // don't play the recover animation
    result.success = true
}

void function PlayerRemoveBatteryPackFromPort( entity player, entity batteryPort )
{

}

void function ApplyBatteryToBatteryPort( entity player, entity batteryPort )
{
    if ( player.GetPlayerNetInt( "batteryCount" ) <= 0 )
        return
    entity battery = Rodeo_TakeBatteryAwayFromPilot( player )
    if ( !IsValid( battery ) )
        return

    entity nearestTurret = GetNearestMegaTurret( batteryPort ) // consider this is the port's related turret
    if ( !IsValid( nearestTurret ) )
        return

    // player can apply battery
    // hide icon
    Battery_StopFX( battery )
    battery.Minimap_Hide( TEAM_MILITIA, null )
	battery.Minimap_Hide( TEAM_IMC, null )
    // be in port
    battery.SetParent( batteryPort, "REF" )
    battery.SetOrigin( < 0,0,5 > ) // offset
    batteryPort.s.batteryPack = battery
    // change turret settings
    SetTeam( nearestTurret, player.GetTeam() )
    nearestTurret.SetHealth( nearestTurret.GetMaxHealth() )
    nearestTurret.SetShieldHealth( nearestTurret.GetShieldHealthMax() )
    EmitSoundOnEntityOnlyToPlayer( player, player, "UI_TitanBattery_Pilot_Give_TitanBattery" )
}

entity function GetNearestMegaTurret( entity ent )
{
    array<entity> allTurrets = GetNPCArrayByClass( "npc_turret_mega" )
    entity turret = GetClosest( allTurrets, ent.GetOrigin(), 9999 ) // get nearest turret
    return turret
}

void function CleanUpBatterySequenceForPlayer( entity player )
{
    ClearPlayerAnimViewEntity( player )
    player.AnimViewEntity_SetLerpOutTime( 0.4 ) // blend out the clear anim view entity
    player.ClearParent()
    player.Anim_Stop()
}

void function DelayedClearSyncedEntityForBatteryApply( entity player, entity batteryPort )
{
    WaitFrame()
	
    if ( IsValid( player ) && IsValid( batteryPort ) )
        player.SetSyncedEntity( null )
}

void function ClearApplyBatteryAnimTempProps( entity player )
{
	foreach( tempProp in player.p.rodeoAnimTempProps )
	{
		if ( IsValid( tempProp ) )
			tempProp.Destroy()
		}

	player.p.rodeoAnimTempProps.clear()
}

BatteryPortStruct function GetCurrentStructFromBatteryPort( entity batteryPort )
{
    BatteryPortStruct tempStruct
    foreach( BatteryPortStruct portStruct in file.allBatteryPorts )
    {
        if( portStruct.batteryPort == batteryPort )
        {
            tempStruct = portStruct
            break
        }
    }
    return tempStruct
}