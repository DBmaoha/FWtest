untyped
global function InitTurretBatteryPort // only for fw turrets!

const asset BATTERY_PORT_USE_HINT_MODEL = $"models/weapons/bullets/mgl_grenade.mdl"

global struct BatteryPortStruct
{
    entity batteryPort
    entity turret
    bool hasBattery
    float lastBatteryAppliedTime
}

struct
{
    array<BatteryPortStruct> allBatteryPorts
} file

void function InitTurretBatteryPort( entity batteryPort )
{
    batteryPort.s.relatedTurret <- null             // entity
    batteryPort.s.relatedTurretInfo <- null         // entity
    batteryPort.s.hasBattery <- false               // bool
    batteryPort.s.batteryPackInside <- null         // entity
    batteryPort.s.beingUsed <- false                // bool

    entity turret = GetNearestMegaTurret( batteryPort ) // consider this is the port's related turret
    if( IsValid( turret ) )
    {
        SetTeam( batteryPort, turret.GetTeam() )
        batteryPort.s.relatedTurret = turret
    }
    entity turretInfo = GetTurretInfoFromMegaTurret( turret )
    if( IsValid( turretInfo ) )
        batteryPort.s.relatedTurretInfo = turretInfo

    batteryPort.SetUsableByGroup( "pilot" )
    batteryPort.SetUsePrompts( "#FW_USE_GENERATOR_NO_BATTERY", "#FW_USE_GENERATOR_NO_BATTERY" ) // don't know what to use
    AddCallback_OnUseEntity( batteryPort, OnUseTurretBatteryPort )

    /* // not used yet
    array<entity> allTurrets = GetNPCArrayByClass( "npc_turret_mega" )
    entity turret = GetClosest( allTurrets, batteryPort.GetOrigin(), 65535 ) // get nearest turret
    BatteryPortStruct initStruct
    initStruct.batteryPort = batteryPort
    initStruct.turret = turret
    initStruct.hasBattery = false
    initStruct.lastBatteryAppliedTime = -1.0 // not used yet
    */
}

function OnUseTurretBatteryPort( entBeingUse, user )
{
    expect entity( entBeingUse )
    expect entity( user )

    //print( "try to use batteryPort" )
    thread TryUseTurretBatteryPort( user, entBeingUse )
}

void function TryUseTurretBatteryPort( entity player, entity batteryPort )
{
    if( batteryPort.s.beingUsed ) // already being using
        return

    player.EndSignal( "OnDeath" )
    player.EndSignal( "OnDestroy" )
    player.EndSignal( "ScriptAnimStop" )
    AddButtonPressedPlayerInputCallback( player, IN_JUMP, ForceStopUseBatteryPort )

    OnThreadEnd(
        function():( player )
        {
            RemoveButtonPressedPlayerInputCallback( player, IN_JUMP, ForceStopUseBatteryPort )
        }
    )

    entity turret = expect entity( batteryPort.s.relatedTurret )
    entity info = expect entity( batteryPort.s.relatedTurretInfo )
    if( !IsValid( turret ) ) // turret has been destroyed!
        return

    bool sameTeam = turret.GetTeam() == player.GetTeam() || turret.GetTeam() == TEAM_BOTH // get turret's team
    if( IsValid( batteryPort.s.batteryPackInside ) && !sameTeam ) // port already has a battery
    {
        // enemy try to remove it
        waitthread PlayerRemoveBatteryPackFromPort( player, batteryPort )
    }
    else if( PlayerHasBattery( player ) && sameTeam ) // player has a battery
    {
        // friendly try to apply one
        waitthread PlayerApplesBatteryPackToPort( player, batteryPort )
    }
}

void function ForceStopUseBatteryPort( entity player )
{
    player.Signal( "ScriptAnimStop" )
}

void function PlayerApplesBatteryPackToPort( entity player, entity batteryPort )
{
    table result = {}
    result.success <- false
    batteryPort.s.beingUsed = true

	entity battery = GetBatteryOnBack( player )
	battery.Hide() //Hide it because the animation has a battery model already
    Battery_StopFX( battery )

	entity tempBattery3p
	tempBattery3p = CreatePropDynamic( RODEO_BATTERY_MODEL_FOR_RODEO_ANIMS )
	tempBattery3p.SetParent( player, "R_HAND", false, 0.0 )
	tempBattery3p.RemoveFromSpatialPartition()

	entity tempBattery1p
	tempBattery1p = CreatePropDynamic( RODEO_BATTERY_MODEL_FOR_RODEO_ANIMS )
	tempBattery1p.SetParent( player.GetFirstPersonProxy(), "R_HAND", false, 0.0 )
	tempBattery1p.RemoveFromSpatialPartition()

	player.p.rodeoAnimTempProps.append( tempBattery3p )
	player.p.rodeoAnimTempProps.append( tempBattery1p )

    entity ref = CreateScriptMover() // use a ref to play animations
    ref.SetOrigin( batteryPort.GetOrigin() + < 40,0,-35 > ) // offset for animation
    //ref.SetAngles( < 0, player.EyeAngles().y, 0 > ) // sync player's eyeAngle, messy

	OnThreadEnd(
	function() : ( battery, batteryPort, player, ref, result )
		{
			if ( IsValid( battery ) && !result.success ) // animation interrupted
            {
				battery.Show()
                Battery_StartFX( battery )
            }

            if ( IsValid( batteryPort ) )
                batteryPort.s.beingUsed = false

			if ( IsValid( player ) )
            {
                DeployAndEnableWeapons( player )
                ClearBatteryAnimTempProps( player )
                //thread DelayedClearSyncedEntityForBatteryApply( player, batteryPort )
                PutEntityInSafeSpot( player, player, null, player.GetOrigin() + <0, 0, 32>, player.GetOrigin() )

                StopSoundOnEntity( batteryPort, "rodeo_medium_battery_return_ext" )

                if( result.success ) // successfully applied battery
                {
                    ApplyBatteryToBatteryPort( player, batteryPort )
                }

                CleanUpBatterySequenceForPlayer( player )
            }

            // remove ref after cleaned sequence
            if ( IsValid( ref ) )
                ref.Destroy()
		}
	)

	FirstPersonSequenceStruct sequence
	sequence.attachment = "REF" // only ref the batteryPort has

    // these are baically atlas's battery animations
	sequence.thirdPersonAnim 		= "pt_rodeo_ride_r_return_battery"
	sequence.firstPersonAnim 		= "ptpov_rodeo_ride_r_return_battery"

	EmitSoundOnEntity( batteryPort, "rodeo_medium_battery_return_ext" ) // emit sound on port?

	//player.SetSyncedEntity( ref )
    HolsterAndDisableWeapons( player )

    float sequenceDuration = player.GetSequenceDuration( sequence.thirdPersonAnim )
    // thread so we can set things inside sequence
	thread FirstPersonSequence( sequence, player, ref )

    wait sequenceDuration - 1.1 // don't play the recover animation
    result.success = true
}

void function ApplyBatteryToBatteryPort( entity player, entity batteryPort )
{
    if ( player.GetPlayerNetInt( "batteryCount" ) <= 0 ) // player actually not carrying a battery
        return

    entity battery = Rodeo_TakeBatteryAwayFromPilot( player )
    if ( !IsValid( battery ) )
        return

    // player can apply battery

    // hide icon
    Battery_StopFX( battery )
    battery.Minimap_Hide( TEAM_MILITIA, null )
	battery.Minimap_Hide( TEAM_IMC, null )

    // be in port
    battery.SetParent( batteryPort, "REF" )
    battery.SetOrigin( < 0,0,5 > ) // offset
    batteryPort.s.batteryPackInside = battery

    // change turret settings
    bool turretReplaced = false
    entity turret = expect entity( batteryPort.s.relatedTurret ) // consider this is the port's related turret
    if( !IsAlive( turret ) ) // turret has been killed!
    {
        entity info = expect entity( batteryPort.s.relatedTurretInfo )
        turret = ReplaceMegaTurretFromTurretInfo( info )
        if( !IsValid( turret ) ) // replace failed!
            return
        batteryPort.s.relatedTurret = turret
        turretReplaced = true // if turret has been replaced, must reset team!
    }

    if( turret.GetTeam() != player.GetTeam() || turretReplaced ) // is there a need to change team?
    {
        bool isOriginTurret = expect bool( turret.s.IsOrigin )
        
        entity minimapTurret = expect entity( turret.s.minimapstate )
        string turretId = expect string( turret.s.turretflagid )
        SetTeam( turret, player.GetTeam() )
        SetTeam( minimapTurret, player.GetTeam() )

        int stateFlag = 1 // netural
        if ( player.GetTeam() == TEAM_IMC )
        {
            if( isOriginTurret )
                stateFlag = 10 // 10 means origin TEAM_IMC turret
            else
                stateFlag = 2 // 2 means TEAM_IMC
        }
        else
        {
            if( isOriginTurret )
                stateFlag = 13 // 13 means origin TEAM_MILITIA turret
            else
                stateFlag = 4 // 4 means TEAM_MILITIA
        }

        SetGlobalNetInt( "turretStateFlags" + turretId, stateFlag ) // for rui objects to work
    }

    // restore turret health
    turret.SetHealth( turret.GetMaxHealth() )
    turret.SetShieldHealth( turret.GetShieldHealthMax() )
    EmitSoundOnEntityOnlyToPlayer( player, player, "UI_TitanBattery_Pilot_Give_TitanBattery" )
}

void function PlayerRemoveBatteryPackFromPort( entity player, entity batteryPort )
{
    table result = {}
    result.success <- false
    batteryPort.s.beingUsed = true

    entity battery = expect entity( batteryPort.s.batteryPackInside )
    if( !IsValid( battery ) )
        return
    if( !( "animationBattery" in player.s ) )
        player.s.animationBattery <- null
    player.s.animationBattery = battery

	entity tempBattery3p
	tempBattery3p = CreatePropDynamic( RODEO_BATTERY_MODEL_FOR_RODEO_ANIMS )
	tempBattery3p.SetParent( player, "R_HAND", false, 0.0 )
	tempBattery3p.RemoveFromSpatialPartition()
	tempBattery3p.Hide()

	entity pilotFirstPersonProxy = player.GetFirstPersonProxy()
	entity tempBattery1p = CreatePropDynamic( RODEO_BATTERY_MODEL_FOR_RODEO_ANIMS )
	tempBattery1p.SetParent( pilotFirstPersonProxy, "R_HAND", false, 0.0 )
	tempBattery1p.RemoveFromSpatialPartition()
	tempBattery1p.Hide()

	player.p.rodeoAnimTempProps.append( tempBattery1p )
	player.p.rodeoAnimTempProps.append( tempBattery3p )

    AddAnimEvent( player, "rodeo_battery_show", PortBatteryRemoval_ShowBattery ) //Consider adding this in add player

    entity ref = CreateScriptMover() // use a ref to play animations
    ref.SetOrigin( batteryPort.GetOrigin() + < 40,0,-35 > ) // offset for animation

	OnThreadEnd(
		function() : ( player, batteryPort, battery, ref, result )
		{
            if ( IsValid( battery ) && !result.success ) // animation interrupted
				battery.Show()

            if ( IsValid( batteryPort ) )
                batteryPort.s.beingUsed = false

            if ( IsValid( player ) )
            {
                DeployAndEnableWeapons( player )
                ClearBatteryAnimTempProps( player )
                PutEntityInSafeSpot( player, player, null, player.GetOrigin() + <0, 0, 32>, player.GetOrigin() )
                StopSoundOnEntity( batteryPort, "rodeo_medium_battery_steal_ext" )

                if( result.success ) // successfully removed battery
                {
                    RemoveBatteryFromPort( player, batteryPort )
                }

                if (  HasAnimEvent( player, "rodeo_battery_show" )  )
				    DeleteAnimEvent( player, "rodeo_battery_show" )

                CleanUpBatterySequenceForPlayer( player )
            }

            // remove ref after cleaned sequence
            if ( IsValid( ref ) )
                ref.Destroy()
		}
	)

	FirstPersonSequenceStruct sequence
	sequence.attachment = "ref"
	sequence.thirdPersonAnim = "pt_rodeo_ride_r_hijack_battery"
	sequence.firstPersonAnim = "ptpov_rodeo_ride_r_hijack_battery"

	EmitSoundOnEntity( batteryPort, "rodeo_medium_battery_steal_ext" )

    HolsterAndDisableWeapons( player )

	float sequenceDuration = player.GetSequenceDuration( sequence.thirdPersonAnim )
    // thread so we can set things inside sequence
	thread FirstPersonSequence( sequence, player, ref )

    wait sequenceDuration - 0.1 // shorter sequence is enough
    result.success = true
}

void function RemoveBatteryFromPort( entity player, entity batteryPort )
{
    entity battery = expect entity( batteryPort.s.batteryPackInside )
    if( !IsValid( battery ) )
        return
    // destroy the battery, don't give it to any players
    battery.Destroy() 

    entity turret = expect entity( batteryPort.s.relatedTurret )
    if( !IsAlive( turret ) ) // turret has been destroyed!
        return
    // damaging turret
    int damageAmount = int( turret.GetMaxHealth() * 0.5 ) // not just shield damage
    turret.TakeDamage( damageAmount, player, player, { damageSourceId = eDamageSourceId.rodeo_battery_removal, scriptType = damageTypes.rodeoBatteryRemoval } )
    EmitSoundOnEntityOnlyToPlayer( player, player, "UI_TitanBattery_Pilot_Take_TitanBattery" )
}

void function PortBatteryRemoval_ShowBattery( entity player )
{
    // hide the real battery inside
    entity batteryToHide = expect entity( player.s.animationBattery )
    if( IsValid( batteryToHide ) )
        batteryToHide.Hide()

	foreach( tempProp in player.p.rodeoAnimTempProps )
	{
		tempProp.Show()
	}
}

// get nearest turret, consider it belongs to the port
entity function GetNearestMegaTurret( entity ent )
{
    array<entity> allTurrets = GetNPCArrayByClass( "npc_turret_mega" )
    entity turret = GetClosest( allTurrets, ent.GetOrigin(), 65535 )
    return turret
}

void function CleanUpBatterySequenceForPlayer( entity player )
{
    ClearPlayerAnimViewEntity( player )
    player.AnimViewEntity_SetLerpOutTime( 0.4 ) // blend out the clear anim view entity
    player.ClearParent()
    player.Anim_Stop()
}

void function DelayedClearSyncedEntityForBatteryApply( entity player, entity batteryPort )
{
    WaitFrame()

    if ( IsValid( player ) && IsValid( batteryPort ) )
        player.SetSyncedEntity( null )
}

void function ClearBatteryAnimTempProps( entity player )
{
	foreach( tempProp in player.p.rodeoAnimTempProps )
	{
		if ( IsValid( tempProp ) )
			tempProp.Destroy()
		}

	player.p.rodeoAnimTempProps.clear()
}

BatteryPortStruct function GetCurrentStructFromBatteryPort( entity batteryPort )
{
    BatteryPortStruct tempStruct
    foreach( BatteryPortStruct portStruct in file.allBatteryPorts )
    {
        if( portStruct.batteryPort == batteryPort )
        {
            tempStruct = portStruct
            break
        }
    }
    return tempStruct
}